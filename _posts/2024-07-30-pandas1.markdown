---
layout: post
title: "[판다스 데이터 분석] Part1. 판다스 입문"
date: 2023-07-30
categories: "판다스"
---

# 1-1. 데이터과학자가 판다스를 배우는 이유

# 1-2. 판다스 자료구조

### 판다스 라이브러리
- 서로 다른 여러 가지 유형의 데이터를 공통의 포맷으로 정리하려는 목적
- 클래스: 시리즈, 데이터프레임
- 내장 함수: Series(), DataFrame(), read_csv(), read_excel() 등

## 1-2-2. 시리즈
- 데이터가 순차적으로 나열된 1차원 배열의 형태
- index와 값 일대일 대응
-> 키와 값이 짝을 이루는 파이썬 딕셔너리와 비슷한 구조
-> index는 데이터 주소의 역할을 함.

#### # 딕셔너리 -> 시리즈 변환
```
pandas.Series(딕셔너리)
```
 
### 인덱스
- 자기와 짝을 이루는 데이터 값의 순서와 주소 저장
- 인덱스를 통해 데이터 값의 탐색, 정렬, 선택, 결합 등 데이터 조작 용이
- 종류
    - 정수형 위치 인덱스
    - 인덱스 이름 or 인덱스 라벨

#### # 인덱스 배열만 선택
```
Series객체.index
```

#### # 데이터 값 배열만 선택
```
Series객체.values
```

#### # 리스트 -> 시리즈 변환
```
pandas.Series(리스트)
```
-> 인덱스로 변환될 값이 없으므로 별도로 정의하지 않으면 디폴트로 정수형 위치 인덱스 (0, 1, 2, ...) 자동 지정

### 원소 선택
- 인덱스를 이용하여 시리즈의 하나 또는 여러 개의 원소 선택
- 인덱스의 유형에 따라 방법이 다름.
    - 정수형 위치 인덱스: [] 안에 위치를 나타내는 숫자 입력
    - 인덱스 이름: [] 안에 '이름' or "이름" 입력

#### # 투플 -> 시리즈 변환 (인덱스 이름 별도로 지정)
```
import pandas as pd

tup_data = ('영인', '2010-05-01', '여', True)
sr = pd.Series(tup_data, index=['이름', '생년월일', '성별', '학생여부'])
```

#### # 원소 1개 선택
```
print(sr[0]) #출력: 영인
print(sr['이름']) #출력: 영인
```

#### # 원소 여러개 선택
```
```

#### # 인덱스 범위를 지정하여 원소 선택
```
```
## 1-2-2. 데이터프레임
- 2차원 배열  
-> 여러개의 열벡터(시리즈)들이 같은 행 인덱스를 기준으로 줄지어 결합된 2차원 벡터  
![데이터프레임구조](/assets/img/dataframe.jpg)  
-> 열: 공통의 속성을 갖는 일련의 데이터  
-> 행: 개별 관측대상에 대한 다양한 속성 데이터들의 모음인 레코드
- 행과 열을 나타내기 위해 두 가지 종류의 주소 사용  
-> 행 인덱스 / 열 이름

#### # 딕셔너리 -> 데이터프레임 변환
```
pandas.DataFrame(딕셔너리 객체)
```
-> 리스트를 원소로 갖는 딕셔너리를 함수의 인자로 전달  
-> 딕셔너리의 키가 열 이름이 됨.  
-> 각 리스트가 열이 됨.  
-> 행 인덱스에는 정수형 위치 인덱스 자동 지정  
![딕셔너리->데이터프레임](/assets/img/dic_dataframe.jpg)

#### # 행 인덱스, 열 이름 설정
```
pandas.DataFrame (2차원 배열, index = 행 인덱스 배열, columns = 열 이름 배열)
```
```
import pandas as pd

df = pd.DataFrame ([15, '남', '덕영중'], [17, '여', '수리중']),
                    index=['준서', '예은']
                    columns = ['나이', '성별', '학교']

print(df)
#출력:        나이 성별 학교
        준서   15  남  덕영중
        예은   17  여  수리중
```

#### # 전체 행 인덱스와 열 이름 변경
```
DataFrame 객체.index = 새로운 행 인덱스 배열
DataFrame 객체.columns = 새로운 열 이름 배열
```

#### # 일부 행 인덱스와 열 이름 변경
```
DataFrame 객체.rename(index={기존 인덱스:새 인덱스, ...}) #행 인덱스 변경
DataFrame 객체.rename(columns={기존 이름:새 이름, ...}) #열 이름 변경
```

#### # 행/열 삭제
```
DataFrame 객체.drop(행 인덱스 또는 배열, axis=0)
DataFrame 객체.drop(열 이름 또는 배열, axis=1)
```
```
```

#### # 행 선택
- loc, iloc 인덱서 사용 -> 한 개, 여러 개, 슬라이싱을 통해 범위 선택 가능  
![loc_iloc](/assets/img/loc_iloc.jpg)


#### # 열 선택
```
DataFrame 객체["열 이름"] 또는 DataFrame 객체.열 이름 #열 1개 선택
DataFrame 객체[ [열1, 열2, ..., 열n]] #열 n개 선택
```

> 범위 슬라이싱 활용 (슬라이싱 간격 지정)
>-
>```
>DataFrame 객체.iloc[시작 인덱스 : 끝 인덱스 : 슬라이싱 간격] #iloc 인덱서 예시
>```

#### # 원소 선택
데이터프레임의 행 인덱스와 열 이름을 [행,열] 형식의 2차원 좌표로 입력하여 원소 위치 지정
```
DataFrame 객체.loc[행 인덱스, 열 이름]
DataFrame 객체.iloc[행 번호, 열 번호]
```
-> 1개의 행, 2개 이상의 열 선택 or 2개 이상의 행, 1개의 열 선택 => 시리즈 객체 반환  
-> 2개 이상의 행, 2개 이상의 열 선택 => 데이터프레임 객체 반환

#### # 열 추가
```
DataFrame 객체 ['추가하려는 열 이름'] = 데이터 값
```

#### # 행 추가
```
DataFrame.loc['새로운 행 이름'] = 데이터 값
```
#### # 원소 값 변경
```
DataFrame 객체의 일부분 또는 원소를 선택 = 새로운 값
```
#### # 행, 열의 위치 바꾸기
```
DataFrame 객체.transpose()
DataFrame 객체.T
```

## 1-2-3. 인덱스 활용
#### # 특정 열을 행 인덱스로 설정
```
DataFrame 객체.set_index(['열 이름'] 또는 '열 이름')
```
-> 원본 데이터프레임을 바꾸지 않고 새로운 데이터프레임 객체 반환

#### # 행 인덱스 재배열
```
DataFrame 객체.reindex(새로운 인덱스 배열)
```
-> 기존 데이터프레임 바꾸지 않고 새로운 데이터프레임 객체 반환

#### # 행 인덱스 초기화
```
DataFrame 객체.reset_index() #정수형 위치 인덱스로 초기화
```
-> 기존 데이터프레임 바꾸지 않고 새로운 데이터프레임 객체 반환

#### # 행 인덱스를 기준으로 데이터프레임 정렬
```
DataFrame 객체.sort_index()
```
-> ascending 옵션을 사용하여 오름차순 또는 내림차순 설정  
--> ascending=False 는 내림차순, ascending=True는 오름차순

#### # 특정 열의 데이터 값을 기준으로 데이터프레임 정렬