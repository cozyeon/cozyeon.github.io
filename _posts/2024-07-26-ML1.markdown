---
layout: post
title: "1주차-[데이터 분석가가 반드시 알아야할 모든 것] Chapter10. 데이터 탐색과 시각화"
date: 2023-07-26
categories: "머신러닝"
---

## **10.1 탐색적 데이터 분석(Exploratory Data Analysis: EDA)**

-   가공하지 않은 데이터를 기술통계, 시각화를 통해 탐색, 분석
-   평균, 분산, 왜도, 첨도, 결측치 등 각 변수들의 특성 파악

### 10.1.1 엑셀을 활용한 EDA

-   단순 임의 추출을 통해 1000개의 행 추출 -> 데이터셋을 직접 살펴봄으로써 경향성 대략적으로 파악

### 10.1.2 탐색적 데이터 분석 실습

head(): 데이터 샘플 확인

info(): 각 칼럼 별로 non-null 값의 개수, data type 출력

describe(): 평균, 표준편차, 최대 최솟값 확인

violinplot(): 분포 효과적으로 표현  
stripplot(): 각 관측치의 위치를 직관적으로 표현  
\=> 동시에 사용하면 데이터 형태 보다 잘 이해 가능

## **10.2 공분산과 상관성 분석**

-   변수 간의 관계 파악 (타깃변수<->입력변수, 입력변수<->입력변수)
-   변수 간의 상관관계를 파악하는 대표적인 개념: 공분산, 상관계수  
    \=> 가정: 데이터가 등간, 비율 / 두 변수가 선형적 관계

### 10.2.1 공분산

-   두 변수의 분산의 관계
-   공식
    ![공분산공식](/assets/img/cov.jpg)
-   한계: 각 변수 간의 다른 척도기준이 반영되어 공분산의 크기가 상관성의 정도를 나타내지 못함.

### 10.2.2 상관계수

-   공분산의 한계를 해결하기 위해 피어슨 상관계수 사용
-   공식: 공분산을 두 변수가 변하는 전체 정도로 나눠준 것 (-1 <= R <= 1)  
    ![피어슨상관계수](https://blog.kakaocdn.net/dn/dUEADv/btsIJF0wvjB/1EXVRN06H6r3sHt5tj6FW0/img.jpg)
    
-   상관계수에 따른 해석
    
    | 범위 (절댓값) | 단계 |
    | --- | --- |
    | 0 | Zero |
    | 0.1~0.3 | Weak |
    | 0.4~0.6 | Moderate |
    | 0.7~0.9 | Strong |
    | 1 | Perfect |
    
-   주의: 산점도의 기울기와 상관계수는 관련 X / 2차 방정식 그래프와 비슷한 형태일 경우 상관계수 매우 낮게 측정 / 산점도 그래프를 통해 이상치 확인

### 10.2.3 공분산과 상관성 분석 실습

```python
# 산점도 행렬 시각화
sns.set(font_scale=1.1) ## 축 눈금 설정
sns.set_style('ticks')
sns.pairplot(df, diag_kind='kde') 
plot.show()
```

diag\_kind = 'kde': 동일한 변수의 산점도를 분포로 표현해 주는 기능

![산점도그래프예시](/assets/img/scatterplot.jpg)

```python
# 공분산 확인
df. cov()

# 피어슨 상관계수 확인
df. corr(method = 'pearson')
```

cov(), corr() 는 알아서 문자형 변수를 제외하고 계산  
수치적 의미가 없는 숫자형 변수는 drop() 함수로 사전에 제거하는 것이 좋음.

```python
# 히트맵 시각화
sns. heatmap(df.corr(), camp='viridis')
```

노란색에 가까울수록 양의 상관관계, 보라색에 가까울수록 음의 상관관계

```python
# clustermap 히트맵 시각화
sns.clustermap(df.corr(),
                    annot = True,
                    cmap = 'RdYlBu_r',
                    vmin = -1, vmax = 1,)
```

clustermap: 히트맵 + 상관계수, 상관성이 강한 변수들끼리 묶어서 표현해줌

```python
# 중복 제거 히트맵 시각화

## 매트릭스의 우측 상단을 모두 True인 1로, 하단을 False인 0으로 변환
np.triu(np.ones_like(df.corr()))

## True/False mask 배열로 변환
mask = np.triu(np.ones_like(df.corr(), dtype=np.bool))

## 그래프 생성
fig. ax = plt.subplots(figsize=(15,10))
sns.heatmap(df.corr(),
            mask=mask,
            vmin=-1
            vmax=1,
            annot=True,
            cmap="RdYlBu_r",
            cbar=True)
ax.set_title('Wine Quality Correlation', pad = 15)
```

## **10.3 시간 시각화**

-   시간 흐름에 따른 데이터의 변화 => 전체적인 흐름, 데이터의 트렌드, 노이즈 발견
-   종류
    -   연속형(선그래프)
        -   시간 간격의 밀도가 높을 때
        -   변동이 심할 때 추세선으로 트렌트나 패턴 확인 => 이동평균 방법 사용
    -   분절형(막대그래프)
        -   시간 간격의 밀도가 낮은 경우
        -   값들의 상대적 차이를 나타내는 것에 유리
        -   막대그래프, 누적 막대그래프, 점 그래프 등

## **10.4 비교 시각화**

-   히트맵
    -   셀의 색상이나 채도 => 데이터 값의 높고 낮음
    -   행은 그룹, 열은 요소에 해당
    -   많은 정보를 한번에 표시
-   방사형 차트
    -   한 그룹당 차트 하나, 각 항목이 요소에 해당
    -   하나의 차트에 모든 그룹을 한 번에 시각화
-   평행 좌표 그래프(Parallel coordinates)
    -   한 그룹당 선 하나, 가로축은 항목, 세로축은 척도
    -   변수별 값을 정규화하면 보다 효과적으로 표현
    -   집단적 경향성 표현에 용이

## **10.5 분포 시각화**

-   연속형 (양적 척도)
    -   막대그래프, 선그래프
    -   히스토그램
        -   구간별 도수를 막대그래프로 표현
        -   각 구간: bin / 구간의 높이: 밀도 (단위 구간에 속한 값의 비율)
        -   구간의 개수는 20개 정도로 시작해서 정보 손실 커지기 전까지 점점 줄여나감
-   명목형 (질적 척도)
    -   파이차트, 도넛차트
    -   트리맵 차트
        -   하나의 큰 사각형을 구성 요소의 비율에 따라 작은 사각형으로 쪼개어 분포 표현
        -   위계구조 표현 가능
    -   와플 차트
        -   일정한 네모난 조각들로 분포 표현
        -   위계구조 표현은 불가능

## **10.6 관계 시각화**

-   산점도(scatter plot)
    -   극단치가 주요 구간을 압축시킬 수 있기 때문에 제거하고 그리는 것이 좋음
    -   점들이 서로 너무 겹칠 때 => 점에 투명도를 주면 점들의 밀도 표현 가능
    -   두 변수 간의 관계만 표현할 수 있다는 단점
-   버블 차트
    -   세 가지 요소의 상관관계 표현 가능 by 버블의 크기
    -   네 가지 요소까지 표현 가능 by 버블의 색상, 농도까지 추가
    -   원의 지름이 아닌 면적을 통해 크기 판단 (지름 2배 => 면적 4배)

## **10.7 공간 시각화**

-   위도와 경도 데이터를 지도에 매핑하여 시각적으로 표현  
    (Google의 GeoMap을 이용하면 지명만으로 공간 시각화가 가능하긴 함)
-   종류
    -   도트맵(Dot map)
        -   지도에 동일한 크기의 점을 찍어 표현
        -   정확한 값 전달에는 부적합 => 축소했을 때 정확한 수치 표현, 확대하면 점
    -   버블맵(Bubble map)
        -   버블 차트를 지도에 옮겨둔 것
        -   데이터 값 = 원의 크기
        -   겹치지 않도록 주의
    -   코로플레스맵(Choropleth map) = 단계 구분도
        -   색상의 음영을 통해 데이터 값 표현
        -   정확한 수치 인지는 어려움
        -   큰 지역이 강조되는 점 유의
    -   커넥션맵(Connection map) = 링크맵(Link map)
        -   지도에 찍힌 점들을 연결하여 표현 => 경로 표시도 가능
        -   연결선의 분포나 집중도를 통해 지리적 관계의 패턴 파악
    -   플로우맵(Flow map)
        -   커넥션맵 + 시작점과 도착점
    -   카토그램(Cartogram)
        -   각 지역의 면적을 데이터 값에 비례하도록 변형하여 표현

## **10.8 박스 플롯**

-   네모 상자 모양에 최댓값과 최솟값을 나타내는 선이 결합된 모양
-   데이터의 분포, 편향성,평균, 중앙값 등 다양한 수치 하나의 그림으로 표현
-   박스 플롯의 5가지 수치  
    1) 최솟값: 제 1사분위에서 1.5 IQR(Interquartile range)을 뺀 위치  
    2) 제 1사분위: 25%  
    3) 제 2사분위: 50% (중앙값)  
    4) 제 3사분위: 75%  
    5) 최댓값: 제 3사분위에서 1.5 IQR을 더한 위치

![박스플롯예시](/assets/img/boxplot.jpg)

출처: 데이터 분석가가 반드시 알아야 할 모든 것