---
layout: post
title: "[판다스 데이터 분석] Part3. 시각화 도구 - 1"
date: 2023-08-16
categories: "판다스"
---
- 시각화의 이유: 데이터의 구조와 패턴 파악에 용이, 다양한 관점에서 데이터에 관한 통찰력 제공
- 판다스의 데이터 시각화: 데이터 시각화를 지원하는 내장 기능이 풍부하지 않아 다른 도구 임포트하여 사용

# **1. Matplotlib - 기본 그래프 도구**
- 파이썬 표준 시각화 도구
- 2D 평면 그래프에 관한 다양한 포맷과 기능 지원
- 객체지향 프로그래밍 지원 -> 그래프 요소를 세세하게 꾸밀 수 있음.

### **1-1. 선 그래프**
- 연속적인 값의 변화와 패턴을 파악하는데 적합 (시계열 데이터)

#### # 기본 사용법
(이 부분은 뒷부분 코드에서 모두 생략하겠다.)

```python
# 라이브러리 불러오기
import pandas as pd
import matplotlib.pyplot as plt

# Excel 데이터를 데이터프레임 변환 
df = pd.read_excel('시도별 전출입 인구수.xlsx', engine='openpyxl', header=0)

# 누락값(NaN)을 앞 데이터로 채움 (엑셀 양식 병합 부분)
df = df.fillna(method='ffill')

# 서울에서 다른 지역으로 이동한 데이터만 추출하여 정리
mask = (df['전출지별'] == '서울특별시') & (df['전입지별'] != '서울특별시') 
df_seoul = df[mask]
df_seoul = df_seoul.drop(['전출지별'], axis=1)
df_seoul.rename({'전입지별':'전입지'}, axis=1, inplace=True)
df_seoul.set_index('전입지', inplace=True)

# 서울에서 경기도로 이동한 인구 데이터 값만 선택 
sr_one = df_seoul.loc['경기도']
```
```python
# x, y축 데이터를 plot 함수에 입력
plt.plot(sr_one.index, sr_one.values)

# 판다스 객체를 plot 함수에 입력
plt.plot(sr_one)
```
-> 두 행의 실행 결과는 같음.

```python
plt.show() # 그래프 출력
```

#### # 차트 제목, 축 이름 추가
- title(): 그래프 객체에 차트 제목 추가
- xlabel(): x축 이름 추가
- ylabel(): y축 이름 추가

```python
# 차트 제목 추가
plt.title('서울 -> 경기 인구 이동')

# 축이름 추가
plt.xlabel('기간')
plt.ylabel('이동 인구수')

plt.show()  # 변경사항 저장하고 그래프 출력
```

#### # Matplotlib 한글 폰트 오류 해결
- Matplotlib을 사용하는 파이썬 프로그램의 앞부분에 한글 폰트를 지정하는 코드 추가

```python
# 라이브러리 불러오기
import pandas as pd
import matplotlib.pyplot as plt

# matplotlib 한글 폰트 오류 문제 해결
from matplotlib import font_manager, rc
font_path = "./malgun.ttf"   #폰트파일의 위치
font_name = font_manager.FontProperties(fname=font_path).get_name()
rc('font', family=font_name)
```

#### # x축 눈금 라벨의 글씨가 겹치는 문제 해결
1) figure() 함수로 그림틀의 가로 사이즈 더 크게 설정   
2) xticks() 함수로 x축 눈금 라벨을 반시계 방향으로 90도 회전

```python
# 그림 사이즈 지정(가로 14인치, 세로 5인치)
plt.figure(figsize=(14, 5))
```
```python
# x축 눈금 라벨 회전하기
plt.xticks(rotation='vertical')
plt.xticks(rotation=90)
```
-> 두 행의 실행 결과는 같음. vertical 대신 각도를 나타내는 숫자를 입력하면 반시계 방향으로 각도만큼 회전.

#### # 그래프 꾸미기
- 스타일 서식 지정은 Matplotlib 실행 환경 설정을 변경하는 것이므로 다른 파일을 실행할 때도 계속 적용됨.

```python
# 스타일 서식 지정
plt.style.use('ggplot') 

# x, y축 데이터를 plot 함수에 입력 
plt.plot(sr_one.index, sr_one.values, marker='o', markersize=10)  # 마커 표시 추가

plt.title('서울 -> 경기 인구 이동', size=30)  #차트 제목
plt.xlabel('기간', size=20)                  #x축 이름
plt.ylabel('이동 인구수', size=20)           #y축 이름

plt.legend(labels=['서울 -> 경기'], loc='best', fontsize=15)   #범례 표시

plt.show()  # 변경사항 저장하고 그래프 출력
```

> Matplotlip 스타일 서식의 종류
>-
>- 종류: 'classic', 'bmh', 'dark_backgroud', 'fast', 'grayscale', 'seaborn' 등
>- 기본 디폴트 상태로 돌아가려면 스파이더(IDE)를 다시 실행

#### # 주석 넣기
- annotate() 함수에 내용, 위치, 정렬 방법 등을 함께 전달   
-> arrowprops 옵션: 텍스트 대신 화살표 표시, 스타일과 시작점 끝점 좌표 입력   
-> rotation 옵션: 양의 회전 방향은 반시계방향   
-> va 옵션: 글자를 위아래 세로 방향으로 정렬 - 'center', 'top', 'bottom', 'baseline'    
-> ha 옵션: 글자를 좌우 가로 방향으로 정렬 - 'center', 'left', 'right'   

```python
# 주석 표시 - 화살표
plt.annotate('',
             xy=(20, 620000),       #화살표의 머리 부분(끝점)
             xytext=(2, 290000),    #화살표의 꼬리 부분(시작점)
             xycoords='data',       #좌표체계
             arrowprops=dict(arrowstyle='->', color='skyblue', lw=5), #화살표 서식
             )

plt.annotate('',
             xy=(47, 450000),       #화살표의 머리 부분(끝점)
             xytext=(30, 580000),   #화살표의 꼬리 부분(시작점)
             xycoords='data',       #좌표체계
             arrowprops=dict(arrowstyle='->', color='olive', lw=5),  #화살표 서식
             )

# 주석 표시 - 텍스트
plt.annotate('인구이동 증가(1970-1995)',  #텍스트 입력
             xy=(10, 550000),            #텍스트 위치 기준점
             rotation=25,                #텍스트 회전각도
             va='baseline',              #텍스트 상하 정렬
             ha='center',                #텍스트 좌우 정렬
             fontsize=15,                #텍스트 크기
             )

plt.annotate('인구이동 감소(1995-2017)',  #텍스트 입력
             xy=(40, 560000),            #텍스트 위치 기준점
             rotation=-11,               #텍스트 회전각도
             va='baseline',              #텍스트 상하 정렬
             ha='center',                #텍스트 좌우 정렬
             fontsize=15,                #텍스트 크기
             )
```

#### # 화면 분할하여 그래프 여러 개 그리기 - axe 객체 활용
- 여러 개의 axe 객체를 만들고, 분활된 화면마다 axe 객체 하나씩 배정
- figure() 함수: 그래프를 그리는 그림틀(fig)을 만듦.   
-> figsize 옵션: 가로 세로 그림틀의 크기 설정
- add_subplot() 메소드: fig 객체에 적용하여 그림틀을 여러 개로 분할 => 나눠진 각 부분이 axe 객체   
-> 이 메소드의 인자에 "행의 크기, 열의 크기, 서브플롯 순서" 를 순서대로 입력
- 각 axe 객체에 plot() 메소드를 적용하여 그래프 출력   
-> 'o' 옵션: 선 대신 점으로 표시   
-> marker='o' 옵션: 원 모양의 마커를 가진 선 그래프   
-> label 옵션
- legend() 메소드: 범례 표시
- set_ylim() 메소드: y축의 최소값, 최대값 한계 설정
- set_xticklabels() 메소드: x축 눈금 라벨 지정   
-> rotation 옵션: 글자 회전   
- set_title() 메소드: 제목 추가
- set_xlabel() 메소드: x축 이름 지정
- set_ylabel() 메소드: y축 이름 지정
- tick_params() 메소드: 축 눈금 라벨의 크기 조절

```python
# 그래프 객체 생성 (figure에 2개의 서브 플롯을 생성)
fig = plt.figure(figsize=(10, 10))   
ax1 = fig.add_subplot(2, 1, 1)
ax2 = fig.add_subplot(2, 1, 2)

# axe 객체에 plot 함수로 그래프 출력
ax1.plot(sr_one, 'o', markersize=10)
ax2.plot(sr_one, marker='o', markerfacecolor='green', markersize=10, 
         color='olive', linewidth=2, label='서울 -> 경기')
ax2.legend(loc='best')

#y축 범위 지정 (최소값, 최대값)
ax1.set_ylim(50000, 800000)
ax2.set_ylim(50000, 800000)

# 축 눈금 라벨 지정 및 75도 회전
ax1.set_xticklabels(sr_one.index, rotation=75)
ax2.set_xticklabels(sr_one.index, rotation=75)
```


``` python
# 그래프 객체 생성 (figure에 1개의 서브 플롯을 생성)
fig = plt.figure(figsize=(20, 5))   
ax = fig.add_subplot(1, 1, 1)

# axe 객체에 plot 함수로 그래프 출력
ax.plot(sr_one, marker='o', markerfacecolor='orange', markersize=10, 
        color='olive', linewidth=2, label='서울 -> 경기')
ax.legend(loc='best')

#y축 범위 지정 (최소값, 최대값)
ax.set_ylim(50000, 800000)

# 차트 제목 추가
ax.set_title('서울 -> 경기 인구 이동', size=20)

# 축이름 추가
ax.set_xlabel('기간', size=12)
ax.set_ylabel('이동 인구수', size = 12)

# 축 눈금 라벨 지정 및 75도 회전
ax.set_xticklabels(sr_one.index, rotation=75)

# 축 눈금 라벨 크기
ax.tick_params(axis="x", labelsize=10)
ax.tick_params(axis="y", labelsize=10)

plt.show()  # 변경사항 저장하고 그래프 출력
```

#### # 동일한 axe 객체에 여러 개의 그래프 추가
- 동일한 axe 객체에 plot() 메소드를 여러 번 적용

```python
# 서울에서 다른 지역으로 이동한 데이터만 추출하여 정리
mask = (df['전출지별'] == '서울특별시') & (df['전입지별'] != '서울특별시') 
df_seoul = df[mask]
df_seoul = df_seoul.drop(['전출지별'], axis=1)
df_seoul.rename({'전입지별':'전입지'}, axis=1, inplace=True)
df_seoul.set_index('전입지', inplace=True)

# 서울에서 '충청남도','경상북도', '강원도'로 이동한 인구 데이터 값만 선택
col_years = list(map(str, range(1970, 2018)))
df_3 = df_seoul.loc[['충청남도','경상북도', '강원도'], col_years]

# 스타일 서식 지정
plt.style.use('ggplot') 

# 그래프 객체 생성 (figure에 1개의 서브 플롯을 생성)
fig = plt.figure(figsize=(20, 5))   
ax = fig.add_subplot(1, 1, 1)

# axe 객체에 plot 함수로 그래프 출력
ax.plot(col_years, df_3.loc['충청남도',:], marker='o', markerfacecolor='green', 
        markersize=10, color='olive', linewidth=2, label='서울 -> 충남')
ax.plot(col_years, df_3.loc['경상북도',:], marker='o', markerfacecolor='blue', 
        markersize=10, color='skyblue', linewidth=2, label='서울 -> 경북')
ax.plot(col_years, df_3.loc['강원도',:], marker='o', markerfacecolor='red', 
        markersize=10, color='magenta', linewidth=2, label='서울 -> 강원')

# 범례 표시
ax.legend(loc='best')

# 차트 제목 추가
ax.set_title('서울 -> 충남, 경북, 강원 인구 이동', size=20)

# 축이름 추가
ax.set_xlabel('기간', size=12)
ax.set_ylabel('이동 인구수', size = 12)

# 축 눈금 라벨 지정 및 90도 회전
ax.set_xticklabels(col_years, rotation=90)

# 축 눈금 라벨 크기
ax.tick_params(axis="x", labelsize=10)
ax.tick_params(axis="y", labelsize=10)

plt.show()  # 변경사항 저장하고 그래프 출력
```

> Matplotlib에서 사용할 수 있는 색의 종류 확인
>-
> ```python
> # 라이브러리 불러오기
>import matplotlib
>
># 컬러 정보를 담을 빈 딕셔너리 생성
>colors={}
>
># 컬러 이름과 헥사코드 확인하여 딕셔서리에 입력
>for name, hex in matplotlib.colors.cnames.items():
>	colors[name] = hex
>
># 딕셔너리 출력    
>print(colors)
>```

### **1-2. 면적 그래프**
- 각 열의 데이터를 선 그래프로 구현하고, 선 그래프와 x 축 사이의 공간에 색을 입힘.   
-> 색의 투명도(alpha): 기본값 0.5, 가능한 범위 0~1   
- plot() 메소드에 **kind='area'** 옵션 추가하여 구현 가능.   
-> plot() 메소드로 생성한 그래프는 axe 객체이므로 세부적인 요소 설정 가능.
- stacked 옵션: 그래프를 누적 여부   
-> stacked=True (기본값): 각 열의 패턴과 열 전체의 합계가 어떻게 변하는지 파악 가능 => 누적 선 그래프 (stacked line plot)   
-> stacked=False: 각 열의 선 그래프들이 서록 겹치도록 표시

#### # unstacked 버전

```python
# 서울에서 다른 지역으로 이동한 데이터만 추출하여 정리
mask = (df['전출지별'] == '서울특별시') & (df['전입지별'] != '서울특별시') 
df_seoul = df[mask]
df_seoul = df_seoul.drop(['전출지별'], axis=1)
df_seoul.rename({'전입지별':'전입지'}, axis=1, inplace=True)
df_seoul.set_index('전입지', inplace=True)

# 서울에서 '충청남도','경상북도', '강원도', '전라남도'로 이동한 인구 데이터 값만 선택
col_years = list(map(str, range(1970, 2018)))
df_4 = df_seoul.loc[['충청남도','경상북도', '강원도', '전라남도'], col_years]
df_4 = df_4.transpose()

# 스타일 서식 지정
plt.style.use('ggplot') 

# 데이터프레임의 인덱스를 정수형으로 변경 (x축 눈금 라벨 표시)
df_4.index = df_4.index.map(int)

# 면적 그래프 그리기
df_4.plot(kind='area', stacked=False, alpha=0.2, figsize=(20, 10))

plt.title('서울 -> 타시도 인구 이동', size=30)
plt.ylabel('이동 인구 수', size=20)
plt.xlabel('기간', size=20)
plt.legend(loc='best', fontsize=15)

plt.show()
```

#### # stacked 버전 + axe 객체 세부 요소 설정

```python
# 면적 그래프 axe 객체 생성
ax = df_4.plot(kind='area', stacked=True, alpha=0.2, figsize=(20, 10))
print(type(ax))

# axe 객체 설정 변경
ax.set_title('서울 -> 타시도 인구 이동', size=30, color='brown', weight='bold')
ax.set_ylabel('이동 인구 수', size=20, color='blue')
ax.set_xlabel('기간', size=20, color='blue')
ax.legend(loc='best', fontsize=15)

plt.show()
```

### **1-3. 막대 그래프**
- 데이터 값의 크기에 비례하여 높이를 갖는 직사각형 막대
- 종류: 세로형 막대 그래프, 가로형 막대 그래프
    - 세로형 막대 그래프: 시계열 데이터 표현에 적합   
    -> plot() 메소드에 **kind='bar'** 옵션 추가
    - 가로형 막대 그래프: 각 변수 사이 값의 크기 차지를 설명하는데 적합   
    -> plot() 메소드에 **kind='barth'** 옵션 추가

#### # 세로형 막대 그래프

```python
# 서울에서 다른 지역으로 이동한 데이터만 추출하여 정리
mask = (df['전출지별'] == '서울특별시') & (df['전입지별'] != '서울특별시') 
df_seoul = df[mask]
df_seoul = df_seoul.drop(['전출지별'], axis=1)
df_seoul.rename({'전입지별':'전입지'}, axis=1, inplace=True)
df_seoul.set_index('전입지', inplace=True)

# 서울에서 '충청남도','경상북도', '강원도', '전라남도'로 이동한 인구 데이터 값만 선택
col_years = list(map(str, range(2010, 2018)))     
df_4 = df_seoul.loc[['충청남도','경상북도', '강원도', '전라남도'], col_years]
df_4 = df_4.transpose()

# 스타일 서식 지정
plt.style.use('ggplot') 

# 데이터프레임의 인덱스를 정수형으로 변경 (x축 눈금 라벨 표시)
df_4.index = df_4.index.map(int)

# 막대 그래프 그리기
df_4.plot(kind='bar', figsize=(20, 10), width=0.7,
          color=['orange', 'green', 'skyblue', 'blue'])

plt.title('서울 -> 타시도 인구 이동', size=30)
plt.ylabel('이동 인구 수', size=20)
plt.xlabel('기간', size=20)
plt.ylim(5000, 30000)
plt.legend(loc='best', fontsize=15)

plt.show()
```

#### # 가로형 막대 
2010~2017년의 기간 동안 서울에서 각 시도로 이동한 인구의 합계를 구하여 시도별로 비교하는 그래프

```python
# 2010-2017년 이동 인구 수를 합계하여 새로운 열로 추가
df_4['합계'] = df_4.sum(axis=1)

# 가장 큰 값부터 정렬
df_total = df_4[['합계']].sort_values(by='합계', ascending=True)

# 스타일 서식 지정
plt.style.use('ggplot') 

# 수평 막대 그래프 그리기
df_total.plot(kind='barh', color='cornflowerblue', width=0.5, figsize=(10, 5))

plt.title('서울 -> 타시도 인구 이동')
plt.ylabel('전입지')
plt.xlabel('이동 인구 수')

plt.show()
```
> 보조 축 활용하기
>-
> ax1 객체에 twinx() 메소드를 적용하여 ax1 객체의 쌍둥이 객체를 만들고, ax2 변수에 저장 -> ax2 객체에 plot() 메소드를 적용하여 그래프를 그림.

### **1-4. 히스토그램**
- 변수가 하나인 단변수 데이터의 빈도수를 그래프로 표현.
- x축을 같은 크기의 여러 구간으로 나누고 각 구간에 속하는 데이터 값의 개수를 y축에 표시   
-> 구간을 나누는 간격의 크기에 따라 빈도가 달라지고 히스토그램의 모양이 변함.
- plot() 메소드에 **kind='hist'** 옵션 추가, binds 옵션으로 구간 개수 지정

```python
# 라이브러리 불러오기
import pandas as pd
import matplotlib.pyplot as plt

plt.style.use('classic')   # 스타일 서식 지정

# read_csv() 함수로 df 생성
df = pd.read_csv('./auto-mpg.csv', header=None)

# 열 이름을 지정
df.columns = ['mpg','cylinders','displacement','horsepower','weight',
              'acceleration','model year','origin','name']

# 연비(mpg) 열에 대한 히스토그램 그리기
df['mpg'].plot(kind='hist', bins=10, color='coral', figsize=(10, 5))

# 그래프 꾸미기
plt.title('Histogram')
plt.xlabel('mpg')
plt.show()
```

### **1-5. 산점도**
- 서로 다른 두 변수 사이의 관계를 나타냄.    
-> 각 변수는 연속되는 값을 가지며, 보통 정수형 또는 실수형
- plot() 메소드에 **'o'**옵션을 사용하면 사실상 산점도
- plot() 메소드에 **kind='scatter'** 옵션 사용   
-> x 옵션: x축에 위치할 변수를 선택   
-> y 옵션: y축에 놓을 변수 선택   
-> c 옵션: 점의 색상 설정   
-> s 옵션: 점의 크기 설정

```python
# 라이브러리 불러오기
import pandas as pd
import matplotlib.pyplot as plt

plt.style.use('default')   # 스타일 서식 지정

# read_csv() 함수로 df 생성
df = pd.read_csv('./auto-mpg.csv', header=None)

# 열 이름을 지정
df.columns = ['mpg','cylinders','displacement','horsepower','weight',
              'acceleration','model year','origin','name']

# 연비(mpg)와 차중(weight) 열에 대한 산점도 그리기
df.plot(kind='scatter', x='weight', y='mpg',  c='coral', s=10, figsize=(10, 5))
plt.title('Scatter Plot - mpg vs. weight')
plt.show()
```
#### # 점의 크기로 3번째 변수 표현 (버블 차트)
- s옵션에 새로운 변수 입력
```python
# cylinders 개수의 상대적 비율을 계산하여 시리즈 생성
cylinders_size = df.cylinders / df.cylinders.max() * 300

# 3개의 변수로 산점도 그리기 
df.plot(kind='scatter', x='weight', y='mpg', c='coral', figsize=(10, 5),
        s=cylinders_size, alpha=0.3)
plt.title('Scatter Plot: mpg-weight-cylinders')
plt.show()
```

#### # 점의 색상으로 3번째 변수 표현
- c 옵션에 새로운 변수 입력
- cmap 옵션: 색상을 정하는 컬러맵 지정 

```python
# 3개의 변수로 산점도 그리기 
df.plot(kind='scatter', x='weight', y='mpg', marker='+', figsize=(10, 5),
        cmap='viridis', c=cylinders_size, s=50, alpha=0.3)
plt.title('Scatter Plot: mpg-weight-cylinders')
```

> 그래프를 그림 파일로 저장
>- 
>- savefig() 함수에 저장하려는 파일의 이름과 파일 경로 설정.
>- transparent=True 옵션: 그림 패경 투명하게 지정
>
>```python
>plt.savefig("./scatter.png")   
>plt.savefig("./scatter_transparent.png", transparent=True)   
>```

### **1-6. 파이 차트**
- 원을 파이 조각처럼 나누어 표현, 조각의 크기는 해당 변수에 속하는 데이터 값의 크기에 비례.
- plot() 메소드에 **kind='pie'** 옵션 사용
-> autopct='%1.1f%%: 소수점 이하 첫째자리까지 퍼센트 표기

```python
# 데이터 개수 카운트를 위해 값 1을 가진 열을 추가
df['count'] = 1
df_origin = df.groupby('origin').sum()   # origin 열을 기준으로 그룹화, 합계 연산
print(df_origin.head())                  # 그룹 연산 결과 출력

# 제조국가(origin) 값을 실제 지역명으로 변경
df_origin.index = ['USA', 'EU', 'JAPAN']

# 제조국가(origin) 열에 대한 파이 차트 그리기 – count 열 데이터 사용
df_origin['count'].plot(kind='pie', 
                     figsize=(7, 5),
                     autopct='%1.1f%%',   # 퍼센트 % 표시
                     startangle=10,       # 파이 조각을 나누는 시작점(각도 표시)
                     colors=['chocolate', 'bisque', 'cadetblue']    # 색상 리스트
                     )

plt.title('Model Origin', size=20)
plt.axis('equal')    # 파이 차트의 비율을 같게 (원에 가깝게) 조정
plt.legend(labels=df_origin.index, loc='upper right')   # 범례 표시
plt.show()
```
### **1-7. 박스 플롯**
- 범주형 데이터의 분포를 파악하는 데 적합.
- 최소값, 1분위값, 중간값, 3분위값, 최대값 제공
- boxplot() 메소드 사용   
-> vert 옵션: True는 수직 박스, False는 수평 박스  

```python
plt.style.use('seaborn-poster')            # 스타일 서식 지정
plt.rcParams['axes.unicode_minus']=False   # 마이너스 부호 출력 설정

# read_csv() 함수로 df 생성
df = pd.read_csv('./auto-mpg.csv', header=None)

# 열 이름을 지정
df.columns = ['mpg','cylinders','displacement','horsepower','weight',
              'acceleration','model year','origin','name']

# 그래프 객체 생성 (figure에 2개의 서브 플롯을 생성)
fig = plt.figure(figsize=(15, 5))   
ax1 = fig.add_subplot(1, 2, 1)
ax2 = fig.add_subplot(1, 2, 2)

# axe 객체에 boxplot 메서드로 그래프 출력
ax1.boxplot(x=[df[df['origin']==1]['mpg'],
               df[df['origin']==2]['mpg'],
               df[df['origin']==3]['mpg']], 
         labels=['USA', 'EU', 'JAPAN'])

ax2.boxplot(x=[df[df['origin']==1]['mpg'],
               df[df['origin']==2]['mpg'],
               df[df['origin']==3]['mpg']], 
         labels=['USA', 'EU', 'JAPAN'],
         vert=False)

ax1.set_title('제조국가별 연비 분포(수직 박스 플롯)')
ax2.set_title('제조국가별 연비 분포(수평 박스 플롯)')

plt.show()
```

 > 파이썬 그래프 갤러리
 >-  파이썬으로 그릴 수 있는 다양한 그래프와 설정 옵션을 참조할 수 있는 사이트
 >- https://python-graph-gallery.com


 [출처: 파이썬 머신러닝 판다스 데이터분석]

